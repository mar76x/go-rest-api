// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: area.sql

package db

import (
	"context"
)

const createArea = `-- name: CreateArea :one
INSERT INTO area
(id, name, description)
VALUES ($1, $2, $3) RETURNING id, name, description, created_at, updated_at, deleted_at
`

type CreateAreaParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateArea(ctx context.Context, arg CreateAreaParams) (Area, error) {
	row := q.db.QueryRow(ctx, createArea, arg.ID, arg.Name, arg.Description)
	var i Area
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteArea = `-- name: DeleteArea :exec
DELETE FROM area
WHERE id = $1
`

func (q *Queries) DeleteArea(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteArea, id)
	return err
}

const getArea = `-- name: GetArea :one
SELECT id, name, description, created_at, updated_at, deleted_at FROM area
WHERE id = $1
`

func (q *Queries) GetArea(ctx context.Context, id int64) (Area, error) {
	row := q.db.QueryRow(ctx, getArea, id)
	var i Area
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listAreas = `-- name: ListAreas :many
SELECT id, name, description, created_at, updated_at, deleted_at FROM area
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAreasParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAreas(ctx context.Context, arg ListAreasParams) ([]Area, error) {
	rows, err := q.db.Query(ctx, listAreas, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Area
	for rows.Next() {
		var i Area
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArea = `-- name: UpdateArea :exec
UPDATE area
    set name = $2, description = $3
WHERE id = $1
`

type UpdateAreaParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateArea(ctx context.Context, arg UpdateAreaParams) error {
	_, err := q.db.Exec(ctx, updateArea, arg.ID, arg.Name, arg.Description)
	return err
}
