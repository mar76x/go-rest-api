// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: paycheck.sql

package db

import (
	"context"

	uuid "github.com/google/uuid"
)

const createPaycheck = `-- name: CreatePaycheck :one
INSERT INTO paycheck
(type, filename, description, folder, path, read, signed, employee_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, type, filename, description, folder, path, read, signed, employee_id, created_at, updated_at, deleted_at
`

type CreatePaycheckParams struct {
	Type        string    `json:"type"`
	Filename    string    `json:"filename"`
	Description string    `json:"description"`
	Folder      string    `json:"folder"`
	Path        string    `json:"path"`
	Read        bool      `json:"read"`
	Signed      bool      `json:"signed"`
	EmployeeID  uuid.UUID `json:"employee_id"`
}

func (q *Queries) CreatePaycheck(ctx context.Context, arg CreatePaycheckParams) (Paycheck, error) {
	row := q.db.QueryRow(ctx, createPaycheck,
		arg.Type,
		arg.Filename,
		arg.Description,
		arg.Folder,
		arg.Path,
		arg.Read,
		arg.Signed,
		arg.EmployeeID,
	)
	var i Paycheck
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Filename,
		&i.Description,
		&i.Folder,
		&i.Path,
		&i.Read,
		&i.Signed,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePaycheck = `-- name: DeletePaycheck :exec
DELETE FROM paycheck
WHERE id = $1
`

func (q *Queries) DeletePaycheck(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePaycheck, id)
	return err
}

const getPaycheck = `-- name: GetPaycheck :one
SELECT id, type, filename, description, folder, path, read, signed, employee_id, created_at, updated_at, deleted_at FROM paycheck
WHERE id = $1
`

func (q *Queries) GetPaycheck(ctx context.Context, id int64) (Paycheck, error) {
	row := q.db.QueryRow(ctx, getPaycheck, id)
	var i Paycheck
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Filename,
		&i.Description,
		&i.Folder,
		&i.Path,
		&i.Read,
		&i.Signed,
		&i.EmployeeID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listPaychecks = `-- name: ListPaychecks :many
SELECT id, type, filename, description, folder, path, read, signed, employee_id, created_at, updated_at, deleted_at FROM paycheck
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaychecksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaychecks(ctx context.Context, arg ListPaychecksParams) ([]Paycheck, error) {
	rows, err := q.db.Query(ctx, listPaychecks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Paycheck
	for rows.Next() {
		var i Paycheck
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Filename,
			&i.Description,
			&i.Folder,
			&i.Path,
			&i.Read,
			&i.Signed,
			&i.EmployeeID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaycheck = `-- name: UpdatePaycheck :exec
UPDATE paycheck
    set type = $2, filename = $3, description = $4, folder = $5, path = $6, read = $7, signed = $8, employee_id = $9
WHERE id = $1
`

type UpdatePaycheckParams struct {
	ID          int64     `json:"id"`
	Type        string    `json:"type"`
	Filename    string    `json:"filename"`
	Description string    `json:"description"`
	Folder      string    `json:"folder"`
	Path        string    `json:"path"`
	Read        bool      `json:"read"`
	Signed      bool      `json:"signed"`
	EmployeeID  uuid.UUID `json:"employee_id"`
}

func (q *Queries) UpdatePaycheck(ctx context.Context, arg UpdatePaycheckParams) error {
	_, err := q.db.Exec(ctx, updatePaycheck,
		arg.ID,
		arg.Type,
		arg.Filename,
		arg.Description,
		arg.Folder,
		arg.Path,
		arg.Read,
		arg.Signed,
		arg.EmployeeID,
	)
	return err
}
