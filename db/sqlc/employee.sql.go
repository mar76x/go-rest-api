// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: employee.sql

package db

import (
	"context"

	uuid "github.com/google/uuid"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee
(id, number, name, surname, birthdate, dni, cuil, marital_status)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, number, name, surname, birthdate, dni, cuil, marital_status, created_at, updated_at, deleted_at
`

type CreateEmployeeParams struct {
	ID            uuid.UUID `json:"id"`
	Number        int64     `json:"number"`
	Name          string    `json:"name"`
	Surname       string    `json:"surname"`
	Birthdate     string    `json:"birthdate"`
	Dni           string    `json:"dni"`
	Cuil          string    `json:"cuil"`
	MaritalStatus string    `json:"marital_status"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRow(ctx, createEmployee,
		arg.ID,
		arg.Number,
		arg.Name,
		arg.Surname,
		arg.Birthdate,
		arg.Dni,
		arg.Cuil,
		arg.MaritalStatus,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Name,
		&i.Surname,
		&i.Birthdate,
		&i.Dni,
		&i.Cuil,
		&i.MaritalStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, number, name, surname, birthdate, dni, cuil, marital_status, created_at, updated_at, deleted_at FROM employee
WHERE id = $1
`

func (q *Queries) GetEmployee(ctx context.Context, id uuid.UUID) (Employee, error) {
	row := q.db.QueryRow(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.Number,
		&i.Name,
		&i.Surname,
		&i.Birthdate,
		&i.Dni,
		&i.Cuil,
		&i.MaritalStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, number, name, surname, birthdate, dni, cuil, marital_status, created_at, updated_at, deleted_at FROM employee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.Query(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Employee
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.Number,
			&i.Name,
			&i.Surname,
			&i.Birthdate,
			&i.Dni,
			&i.Cuil,
			&i.MaritalStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :exec
UPDATE employee
    set number = $2, name = $3, surname = $4, birthdate = $5, dni = $6, cuil = $7, marital_status = $8
WHERE id = $1
`

type UpdateEmployeeParams struct {
	ID            uuid.UUID `json:"id"`
	Number        int64     `json:"number"`
	Name          string    `json:"name"`
	Surname       string    `json:"surname"`
	Birthdate     string    `json:"birthdate"`
	Dni           string    `json:"dni"`
	Cuil          string    `json:"cuil"`
	MaritalStatus string    `json:"marital_status"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) error {
	_, err := q.db.Exec(ctx, updateEmployee,
		arg.ID,
		arg.Number,
		arg.Name,
		arg.Surname,
		arg.Birthdate,
		arg.Dni,
		arg.Cuil,
		arg.MaritalStatus,
	)
	return err
}
