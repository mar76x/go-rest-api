// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: branch.sql

package db

import (
	"context"
)

const createBranch = `-- name: CreateBranch :one
INSERT INTO branch
(id, company_id, name, description)
VALUES ($1, $2, $3, $4) RETURNING id, company_id, name, description, created_at, updated_at, deleted_at
`

type CreateBranchParams struct {
	ID          int64  `json:"id"`
	CompanyID   int64  `json:"company_id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateBranch(ctx context.Context, arg CreateBranchParams) (Branch, error) {
	row := q.db.QueryRow(ctx, createBranch,
		arg.ID,
		arg.CompanyID,
		arg.Name,
		arg.Description,
	)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteBranch = `-- name: DeleteBranch :exec
DELETE FROM branch
WHERE id = $1
`

func (q *Queries) DeleteBranch(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBranch, id)
	return err
}

const getBranch = `-- name: GetBranch :one
SELECT id, company_id, name, description, created_at, updated_at, deleted_at FROM branch
WHERE id = $1
`

func (q *Queries) GetBranch(ctx context.Context, id int64) (Branch, error) {
	row := q.db.QueryRow(ctx, getBranch, id)
	var i Branch
	err := row.Scan(
		&i.ID,
		&i.CompanyID,
		&i.Name,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listBranches = `-- name: ListBranches :many
SELECT id, company_id, name, description, created_at, updated_at, deleted_at FROM branch
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListBranchesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListBranches(ctx context.Context, arg ListBranchesParams) ([]Branch, error) {
	rows, err := q.db.Query(ctx, listBranches, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Branch
	for rows.Next() {
		var i Branch
		if err := rows.Scan(
			&i.ID,
			&i.CompanyID,
			&i.Name,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBranch = `-- name: UpdateBranch :exec
UPDATE branch
    set name = $2, description = $3
WHERE id = $1
`

type UpdateBranchParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateBranch(ctx context.Context, arg UpdateBranchParams) error {
	_, err := q.db.Exec(ctx, updateBranch, arg.ID, arg.Name, arg.Description)
	return err
}
